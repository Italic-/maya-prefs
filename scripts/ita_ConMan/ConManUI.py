#!/usr/autodesk/maya/bin/mayapy
# encoding: utf-8
"""
UI module for ConMan.

Initially generated by pyside-uic from Qt Designer, heavily modified.
"""

from utils.qtshim import QtCore, QtGui, QtWidgets, logging
Signal = QtCore.Signal

log = logging.getLogger(__name__)


class QListItemCon(QtWidgets.QListWidgetItem):

    """
    Save constraint data for immediate retrieval through the UI.

    DAG path saved in scene from self.con_dag property.
    """

    def __init__(self, data, parent=None):
        """
        Subset of QListWidgetItem to store constraint data in the UI.

        :param data: Dict with constraint type and node, constrained node, targets.
        :param parent: Parent widget.
        """
        super(QListItemCon, self).__init__(parent)
        self._data = data
        self._entry_label = "{} | {} | {}".format(
            str(self._data["object"]),
            self._data["type"],
            str(self._data["con_node"]))

    def data(self, role):
        """
        Data to return for specific roles.

        :param role: Specific Qt role to determine how data is returned.
        """
        if role == QtCore.Qt.DisplayRole:
            return self.label
        elif role == QtCore.Qt.UserRole:
            return (self.con_node, self.obj, self.target)

    @property
    def label(self):
        """Label for display."""
        return self._entry_label

    @label.setter
    def label(self, label):
        self._entry_label = label

    @QtCore.Slot()
    def update_label_callback(self):
        """Update label on name change."""
        self.label = "{} | {} | {}".format(
            str(self._data["object"]),
            self._data["type"],
            str(self._data["con_node"]))

    @property
    def con_type(self):
        """Type of constraint: Parent, Point, Orient, Scale."""
        return self._data["type"]

    @property
    def obj(self):
        """Constrained object in the scene."""
        return self._data["object"]

    @property
    def target(self):
        """List of targets the node is constrained to."""
        return self._data["target"]

    @property
    def con_node(self):
        """Constraint node."""
        return self._data["con_node"]

    @property
    def object_dag(self):
        """DAG path of the constrained object."""
        return self.obj.fullPath()

    @property
    def target_dag(self):
        """DAG paths of all targets in a list."""
        return [tg.fullPath() for tg in self.target]

    @property
    def con_dag(self):
        """DAG path of the constraint node."""
        return self.con_node.fullPath()

    @property
    def exists(self):
        """Test if constraint node exists."""
        return (self.con_node.exists() and self.obj.exists())


class ConManWindow(QtWidgets.QMainWindow):

    """Main window."""

    PurgeSig = Signal()
    CloseSig = Signal()
    RenameSig = Signal()
    ExistSig = Signal(tuple)
    AddSig = Signal()
    DelSig = Signal(list)
    SelSig = Signal(list)
    OptionsSig = Signal(str, tuple, bool, float, list, list, list)
    SwitchOffSig = Signal(tuple)
    SwitchSingleSig = Signal(tuple)
    SwitchAllSig = Signal(tuple)

    def __init__(self, parent=None):
        """:param parent: Window to place ConMan under."""
        super(ConManWindow, self).__init__(parent=parent)
        self.settings = QtCore.QSettings("italic", "ConMan2")
        self.__StaleData = []
        self.__setup_ui()
        self.move(self.settings.value("mainwindowposition", QtCore.QPoint(0, 0)))
        self._CManHelp = None

    def __setup_ui(self):
        self.setObjectName("ConManWindow")
        self.resize(250, 425)
        self.setMinimumSize(250, 425)
        self.setMaximumSize(250, 425)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setFamily("Arial")
        self.setFont(font)
        self.setTabShape(QtWidgets.QTabWidget.Rounded)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setMinimumSize(QtCore.QSize(250, 425))
        self.centralwidget.setMaximumSize(QtCore.QSize(250, 425))

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 250, 425))

        self.LayoutVert1 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.LayoutVert1.setSpacing(2)
        self.LayoutVert1.setContentsMargins(5, -1, 5, -1)

        self.ObjList = QtWidgets.QListWidget()
        self.ObjList.setMinimumSize(QtCore.QSize(240, 125))
        self.ObjList.setMaximumSize(QtCore.QSize(240, 125))
        self.ObjList.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.ObjList.setFrameShadow(QtWidgets.QFrame.Plain)
        self.ObjList.setToolTip("Click to see switching options.\nDouble click to select constrained object.")

        self.ButtonRow1 = QtWidgets.QHBoxLayout()
        self.ButtonRow1.setSpacing(0)

        self.ButtonAdd = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonAdd.setEnabled(True)
        self.ButtonAdd.setMinimumSize(QtCore.QSize(40, 40))
        self.ButtonAdd.setMaximumSize(QtCore.QSize(40, 40))
        self.ButtonAdd.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/pickHandlesComp.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.ButtonAdd.setIcon(icon)
        self.ButtonAdd.setIconSize(QtCore.QSize(40, 40))
        self.ButtonAdd.setFlat(False)
        self.ButtonAdd.setToolTip("Add selected constraint nodes to the list.")

        self.ButtonParent = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonParent.setMinimumSize(QtCore.QSize(40, 40))
        self.ButtonParent.setMaximumSize(QtCore.QSize(40, 40))
        self.ButtonParent.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/parentConstraint.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.ButtonParent.setIcon(icon1)
        self.ButtonParent.setIconSize(QtCore.QSize(40, 40))
        self.ButtonParent.setFlat(False)
        self.ButtonParent.setToolTip("Create a parent constraint with options below.")

        self.ButtonPoint = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonPoint.setMinimumSize(QtCore.QSize(40, 40))
        self.ButtonPoint.setMaximumSize(QtCore.QSize(40, 40))
        self.ButtonPoint.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/posConstraint.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.ButtonPoint.setIcon(icon2)
        self.ButtonPoint.setIconSize(QtCore.QSize(40, 40))
        self.ButtonPoint.setFlat(False)
        self.ButtonPoint.setToolTip("Create a point constraint with options below.")

        self.ButtonOrient = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonOrient.setMinimumSize(QtCore.QSize(40, 40))
        self.ButtonOrient.setMaximumSize(QtCore.QSize(40, 40))
        self.ButtonOrient.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/orientConstraint.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.ButtonOrient.setIcon(icon3)
        self.ButtonOrient.setIconSize(QtCore.QSize(40, 40))
        self.ButtonOrient.setFlat(False)
        self.ButtonOrient.setToolTip("Create an orient constraint with options below.")

        self.ButtonScale = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonScale.setMinimumSize(QtCore.QSize(40, 40))
        self.ButtonScale.setMaximumSize(QtCore.QSize(40, 40))
        self.ButtonScale.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/scaleConstraint.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.ButtonScale.setIcon(icon4)
        self.ButtonScale.setIconSize(QtCore.QSize(40, 40))
        self.ButtonScale.setFlat(False)
        self.ButtonScale.setToolTip("Create a scale constraint with options below.")

        self.ButtonRemove = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonRemove.setMinimumSize(QtCore.QSize(40, 40))
        self.ButtonRemove.setMaximumSize(QtCore.QSize(40, 40))
        self.ButtonRemove.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/smallTrash.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.ButtonRemove.setIcon(icon5)
        self.ButtonRemove.setIconSize(QtCore.QSize(40, 40))
        self.ButtonRemove.setFlat(False)
        self.ButtonRemove.setToolTip("Remove constraint from the scene.")

        self.tabWidget = QtWidgets.QTabWidget(self.verticalLayoutWidget)
        self.tabWidget.setMinimumSize(QtCore.QSize(240, 205))
        self.tabWidget.setMaximumSize(QtCore.QSize(240, 205))
        self.tabWidget.setFont(font)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)

        self.tabBar = QtWidgets.QTabBar(self.verticalLayoutWidget)
        self.tabWidget.setTabBar(self.tabBar)

        self.ConstraintOptions = QtWidgets.QWidget()

        self.gridLayoutWidget = QtWidgets.QWidget(self.ConstraintOptions)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(0, 0, 240, 185))

        self.OptionsGrid = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.OptionsGrid.setContentsMargins(-1, -1, -1, -1)
        self.OptionsGrid.setHorizontalSpacing(2)
        self.OptionsGrid.setVerticalSpacing(2)

        # Labels
        self.LabelOffset = QtWidgets.QLabel(self.gridLayoutWidget)
        self.LabelOffset.setFont(font)
        self.LabelOffset.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

        self.LabelMOffset = QtWidgets.QLabel(self.gridLayoutWidget)
        self.LabelMOffset.setFont(font)
        self.LabelMOffset.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

        self.LabelTr = QtWidgets.QLabel(self.gridLayoutWidget)
        self.LabelTr.setFont(font)
        self.LabelTr.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

        self.LabelRo = QtWidgets.QLabel(self.gridLayoutWidget)
        self.LabelRo.setFont(font)
        self.LabelRo.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

        self.LabelSc = QtWidgets.QLabel(self.gridLayoutWidget)
        self.LabelSc.setFont(font)
        self.LabelSc.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

        self.LabelWeight = QtWidgets.QLabel(self.gridLayoutWidget)
        self.LabelWeight.setFont(font)
        self.LabelWeight.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LabelWeight.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)

        # Checkboxes
        self.CheckOffset = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckOffset.setText("")
        self.CheckOffset.setChecked(True)

        # Translate checkboxes
        self.CheckTrAll = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckTrAll.setFont(font)
        self.CheckTrAll.setChecked(True)

        self.CheckTrX = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckTrX.setFont(font)

        self.CheckTrY = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckTrY.setFont(font)

        self.CheckTrZ = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckTrZ.setFont(font)

        # Rotate checkboxes
        self.CheckRoAll = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckRoAll.setFont(font)
        self.CheckRoAll.setChecked(True)

        self.CheckRoX = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckRoX.setFont(font)

        self.CheckRoY = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckRoY.setFont(font)

        self.CheckRoZ = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckRoZ.setFont(font)

        # Scale checkboxes
        self.CheckScAll = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckScAll.setFont(font)
        self.CheckScAll.setChecked(True)

        self.CheckScX = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckScX.setFont(font)

        self.CheckScY = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckScY.setFont(font)

        self.CheckScZ = QtWidgets.QCheckBox(self.gridLayoutWidget)
        self.CheckScZ.setFont(font)

        # Spin boxes
        self.SpinOffsetX = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinOffsetX.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)

        self.SpinOffsetY = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinOffsetY.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)

        self.SpinOffsetZ = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinOffsetZ.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)

        self.SpinWeight = QtWidgets.QDoubleSpinBox(self.gridLayoutWidget)
        self.SpinWeight.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.SpinWeight.setMaximum(1.0)
        self.SpinWeight.setSingleStep(0.1)
        self.SpinWeight.setProperty("value", 1.0)

        self.Switch = QtWidgets.QWidget()

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.Switch)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 0, 235, 110))

        self.SwitchCol = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.SwitchCol.setSpacing(4)
        self.SwitchCol.setContentsMargins(5, 5, 5, 5)

        self.MenuSwitchTarget = QtWidgets.QComboBox(self.verticalLayoutWidget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.MenuSwitchTarget.setSizePolicy(sizePolicy)
        self.MenuSwitchTarget.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.MenuSwitchTarget.setFrame(True)
        self.MenuSwitchTarget.setToolTip("Select a target to switch to...")

        self.ButtonRow3 = QtWidgets.QHBoxLayout()
        self.ButtonRow3.setSpacing(4)

        self.ButtonOff = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.ButtonOff.setMinimumHeight(25)
        self.ButtonOff.setToolTip("Turn all target weights OFF.")

        self.ButtonAll = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.ButtonAll.setMinimumHeight(25)
        self.ButtonAll.setToolTip("Turn all target weights ON.")

        self.ButtonSwitch = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.ButtonSwitch.setMinimumHeight(25)
        self.ButtonSwitch.setToolTip("Weight constraint to a single target.")

        self.CheckVisTrans = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.CheckVisTrans.setChecked(True)
        self.CheckVisTrans.setToolTip("Keep object in the same position\nby updating constraint offsets.")

        self.CheckKey = QtWidgets.QCheckBox(self.verticalLayoutWidget_2)
        self.CheckKey.setChecked(True)
        self.CheckKey.setToolTip("Key offsets, transforms and blend attributes.")

        self.ButtonRow2 = QtWidgets.QHBoxLayout()
        self.ButtonRow2.setSpacing(0)

        self.ButtonHelp = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonHelp.setMinimumHeight(30)
        self.ButtonHelp.setFont(font)
        self.ButtonHelp.setToolTip("Open help documentation.")

        self.ButtonPurge = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.ButtonPurge.setMinimumHeight(30)
        self.ButtonPurge.setFont(font)
        self.ButtonPurge.setToolTip("Remove all ConMan data. \nWARNING: CANNOT BE UNDONE")

        self.__place_ui()
        self.__retranslate_ui()
        self.__set_connections()
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.__set_tab_order()

    def __place_ui(self):
        self.LayoutVert1.addWidget(self.ObjList)
        self.ButtonRow1.addWidget(self.ButtonAdd)
        self.ButtonRow1.addWidget(self.ButtonParent)
        self.ButtonRow1.addWidget(self.ButtonPoint)
        self.ButtonRow1.addWidget(self.ButtonOrient)
        self.ButtonRow1.addWidget(self.ButtonScale)
        self.ButtonRow1.addWidget(self.ButtonRemove)
        self.LayoutVert1.addLayout(self.ButtonRow1)
        self.OptionsGrid.addWidget(self.LabelOffset, 1, 0, 1, 1)
        self.OptionsGrid.addWidget(self.LabelMOffset, 0, 0, 1, 1)
        self.OptionsGrid.addWidget(self.LabelTr, 2, 0, 1, 1)
        self.OptionsGrid.addWidget(self.LabelRo, 4, 0, 1, 1)
        self.OptionsGrid.addWidget(self.LabelSc, 6, 0, 1, 1)
        self.OptionsGrid.addWidget(self.LabelWeight, 8, 0, 1, 1)
        self.OptionsGrid.addWidget(self.CheckOffset, 0, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckTrAll, 2, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckTrX, 3, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckTrY, 3, 2, 1, 1)
        self.OptionsGrid.addWidget(self.CheckTrZ, 3, 3, 1, 1)
        self.OptionsGrid.addWidget(self.CheckRoAll, 4, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckRoX, 5, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckRoY, 5, 2, 1, 1)
        self.OptionsGrid.addWidget(self.CheckRoZ, 5, 3, 1, 1)
        self.OptionsGrid.addWidget(self.CheckScAll, 6, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckScX, 7, 1, 1, 1)
        self.OptionsGrid.addWidget(self.CheckScY, 7, 2, 1, 1)
        self.OptionsGrid.addWidget(self.CheckScZ, 7, 3, 1, 1)
        self.OptionsGrid.addWidget(self.SpinOffsetX, 1, 1, 1, 1)
        self.OptionsGrid.addWidget(self.SpinOffsetY, 1, 2, 1, 1)
        self.OptionsGrid.addWidget(self.SpinOffsetZ, 1, 3, 1, 1)
        self.OptionsGrid.addWidget(self.SpinWeight, 8, 1, 1, 1)
        self.tabWidget.addTab(self.ConstraintOptions, "")
        self.SwitchCol.addWidget(self.MenuSwitchTarget)
        self.ButtonRow3.addWidget(self.ButtonOff)
        self.ButtonRow3.addWidget(self.ButtonAll)
        self.ButtonRow3.addWidget(self.ButtonSwitch)
        self.SwitchCol.addLayout(self.ButtonRow3)
        self.SwitchCol.addWidget(self.CheckVisTrans)
        self.SwitchCol.addWidget(self.CheckKey)
        self.tabWidget.addTab(self.Switch, "")
        self.LayoutVert1.addWidget(self.tabWidget)
        self.ButtonRow2.addWidget(self.ButtonHelp)
        self.ButtonRow2.addWidget(self.ButtonPurge)
        self.LayoutVert1.addLayout(self.ButtonRow2)
        self.setCentralWidget(self.centralwidget)

    def __retranslate_ui(self):
        self.setWindowTitle(QtWidgets.QApplication.translate("ConManWindow", "Constraint Manager", None, QtWidgets.QApplication.UnicodeUTF8))
        self.LabelOffset.setText(QtWidgets.QApplication.translate("ConManWindow", "Offset", None, QtWidgets.QApplication.UnicodeUTF8))
        self.LabelMOffset.setText(QtWidgets.QApplication.translate("ConManWindow", "Maintain Off", None, QtWidgets.QApplication.UnicodeUTF8))
        self.LabelTr.setText(QtWidgets.QApplication.translate("ConManWindow", "Translate", None, QtWidgets.QApplication.UnicodeUTF8))
        self.LabelRo.setText(QtWidgets.QApplication.translate("ConManWindow", "Rotate", None, QtWidgets.QApplication.UnicodeUTF8))
        self.LabelSc.setText(QtWidgets.QApplication.translate("ConManWindow", "Scale", None, QtWidgets.QApplication.UnicodeUTF8))
        self.LabelWeight.setText(QtWidgets.QApplication.translate("ConManWindow", "Weight", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckTrAll.setText(QtWidgets.QApplication.translate("ConManWindow", "All", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckTrX.setText(QtWidgets.QApplication.translate("ConManWindow", "X", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckTrY.setText(QtWidgets.QApplication.translate("ConManWindow", "Y", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckTrZ.setText(QtWidgets.QApplication.translate("ConManWindow", "Z", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckRoAll.setText(QtWidgets.QApplication.translate("ConManWindow", "All", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckRoX.setText(QtWidgets.QApplication.translate("ConManWindow", "X", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckRoY.setText(QtWidgets.QApplication.translate("ConManWindow", "Y", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckRoZ.setText(QtWidgets.QApplication.translate("ConManWindow", "Z", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckScAll.setText(QtWidgets.QApplication.translate("ConManWindow", "All", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckScX.setText(QtWidgets.QApplication.translate("ConManWindow", "X", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckScY.setText(QtWidgets.QApplication.translate("ConManWindow", "Y", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckScZ.setText(QtWidgets.QApplication.translate("ConManWindow", "Z", None, QtWidgets.QApplication.UnicodeUTF8))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.ConstraintOptions), QtWidgets.QApplication.translate("ConManWindow", "Constraint Options", None, QtWidgets.QApplication.UnicodeUTF8))
        self.ButtonOff.setText(QtWidgets.QApplication.translate("ConManWindow", "OFF", None, QtWidgets.QApplication.UnicodeUTF8))
        self.ButtonAll.setText(QtWidgets.QApplication.translate("ConManWindow", "ALL", None, QtWidgets.QApplication.UnicodeUTF8))
        self.ButtonSwitch.setText(QtWidgets.QApplication.translate("ConManWindow", "Switch", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckVisTrans.setText(QtWidgets.QApplication.translate("ConManWindow", "Maintain Visual Transforms", None, QtWidgets.QApplication.UnicodeUTF8))
        self.CheckKey.setText(QtWidgets.QApplication.translate("ConManWindow", "Key", None, QtWidgets.QApplication.UnicodeUTF8))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Switch), QtWidgets.QApplication.translate("ConManWindow", "Switch", None, QtWidgets.QApplication.UnicodeUTF8))
        self.ButtonHelp.setText(QtWidgets.QApplication.translate("ConManWindow", "Help", None, QtWidgets.QApplication.UnicodeUTF8))
        self.ButtonPurge.setText(QtWidgets.QApplication.translate("ConManWindow", "Purge...", None, QtWidgets.QApplication.UnicodeUTF8))

    def __set_tab_order(self):
        self.setTabOrder(self.ObjList, self.ButtonAdd)
        self.setTabOrder(self.ButtonAdd, self.ButtonParent)
        self.setTabOrder(self.ButtonParent, self.ButtonPoint)
        self.setTabOrder(self.ButtonPoint, self.ButtonOrient)
        self.setTabOrder(self.ButtonOrient, self.ButtonScale)
        self.setTabOrder(self.ButtonScale, self.ButtonRemove)
        self.setTabOrder(self.ButtonRemove, self.tabWidget)
        self.setTabOrder(self.tabWidget, self.CheckOffset)
        self.setTabOrder(self.CheckOffset, self.SpinOffsetX)
        self.setTabOrder(self.SpinOffsetX, self.SpinOffsetY)
        self.setTabOrder(self.SpinOffsetY, self.SpinOffsetZ)
        self.setTabOrder(self.SpinOffsetZ, self.CheckTrAll)
        self.setTabOrder(self.CheckTrAll, self.CheckTrX)
        self.setTabOrder(self.CheckTrX, self.CheckTrY)
        self.setTabOrder(self.CheckTrY, self.CheckTrZ)
        self.setTabOrder(self.CheckTrZ, self.CheckRoAll)
        self.setTabOrder(self.CheckRoAll, self.CheckRoX)
        self.setTabOrder(self.CheckRoX, self.CheckRoY)
        self.setTabOrder(self.CheckRoY, self.CheckRoZ)
        self.setTabOrder(self.CheckRoZ, self.CheckScAll)
        self.setTabOrder(self.CheckScAll, self.CheckScX)
        self.setTabOrder(self.CheckScX, self.CheckScY)
        self.setTabOrder(self.CheckScY, self.CheckScZ)
        self.setTabOrder(self.CheckScZ, self.SpinWeight)
        self.setTabOrder(self.SpinWeight, self.MenuSwitchTarget)
        self.setTabOrder(self.MenuSwitchTarget, self.ButtonOff)
        self.setTabOrder(self.ButtonOff, self.ButtonAll)
        self.setTabOrder(self.ButtonAll, self.ButtonSwitch)
        self.setTabOrder(self.ButtonSwitch, self.CheckVisTrans)
        self.setTabOrder(self.CheckVisTrans, self.CheckKey)
        self.setTabOrder(self.CheckKey, self.ButtonHelp)
        self.setTabOrder(self.ButtonHelp, self.ButtonPurge)

    def __set_connections(self):
        self.ObjList.currentItemChanged.connect(self.__item_list_changed)
        self.ObjList.itemDoubleClicked.connect(self.__item_list_double_click)
        self.ButtonAdd.clicked.connect(self.__add_con)
        self.ButtonParent.clicked.connect(lambda: self.__send_options("Parent"))
        self.ButtonPoint.clicked.connect(lambda: self.__send_options("Point"))
        self.ButtonOrient.clicked.connect(lambda: self.__send_options("Orient"))
        self.ButtonScale.clicked.connect(lambda: self.__send_options("Scale"))
        self.ButtonRemove.clicked.connect(self.__remove_con)
        self.ButtonHelp.clicked.connect(self.show_help_ui)
        self.ButtonPurge.clicked.connect(self.show_purge_ui)
        self.ButtonOff.clicked.connect(self.__switch_off)
        self.ButtonSwitch.clicked.connect(self.__switch_single)
        self.ButtonAll.clicked.connect(self.__switch_all)
        self.ExistSig.connect(self.__stale_iter)

    def closeEvent(self, *args, **kwargs):
        """Custom closeEvent to write settings to file."""
        self.CloseSig.emit()
        self.settings.setValue("mainwindowposition", self.pos())
        super(ConManWindow, self).closeEvent(*args, **kwargs)

    def show_help_ui(self):
        """Show help window."""
        if self._CManHelp is None:
            self._CManHelp = ConManHelpWindow()
        self._CManHelp.show()

    def show_purge_ui(self):
        """Show purge confirmation window."""
        self._Purge = PurgeConfirm(parent=self)
        self._Purge.ConfirmSig.connect(self.__purge)

    def iter_list(self):
        """Return all instances of QListWidgetItem entries in constraint list."""
        return [self.ObjList.item(i) for i in range(self.ObjList.count())]

    def __item_list_changed(self, current, previous):
        if current is None:
            self.MenuSwitchTarget.clear()
        else:
            log.debug("Clicked: {}".format(current.text()))
            log.debug("Targets: {}".format(current.target))
            self.populate_menu(current.target)

    def __item_list_double_click(self, item):
        log.debug("Double clicked: {}".format(item.text()))
        self.SelSig.emit(item.obj)

    def populate_list(self, data):
        """
        Create new QListWidgetItem instance with given data and sort list.

        :param data: Dict of vital constraint data for use in the UI.
        """
        listItem = QListItemCon(data)
        self.RenameSig.connect(listItem.update_label_callback)
        self.ObjList.addItem(listItem)
        self.ObjList.sortItems(order=QtCore.Qt.AscendingOrder)
        self.ObjList.setCurrentItem(listItem)

    def clear_list(self, arg=None):
        """Clear constraint list and all data stored in the UI."""
        log.debug("Clearing list")
        self.ObjList.clear()
        del self.__StaleData[:]

    def populate_menu(self, selObjs):
        """
        Populate combo box for target selection.

        :param selObjs: List of PyNode targets.
        """
        self.MenuSwitchTarget.clear()
        for ind, item in enumerate(selObjs):
            self.MenuSwitchTarget.addItem(str(item))
            self.MenuSwitchTarget.setItemData(ind, str(item), userData=item)
            log.debug("Target {}: {}".format(ind, str(item)))

    def __switch_off(self):
        con_node, obj, targets = self.ObjList.currentItem().data(QtCore.Qt.UserRole)

        log.debug("Con: {}".format(con_node))
        log.debug("Obj: {}".format(obj))

        self.SwitchOffSig.emit(
            (self.CheckVisTrans.isChecked(), self.CheckKey.isChecked(),
             con_node, obj, targets)
        )

    def __switch_single(self):
        con_node, obj, targets = self.ObjList.currentItem().data(QtCore.Qt.UserRole)

        current_index = self.MenuSwitchTarget.currentIndex()
        tgt_node = self.MenuSwitchTarget.itemData(current_index)

        log.debug("Obj: {}".format(obj))
        log.debug("Con: {}".format(con_node))
        log.debug("Target: {}".format(tgt_node))

        self.SwitchSingleSig.emit(
            (self.CheckVisTrans.isChecked(), self.CheckKey.isChecked(),
             con_node, obj, targets, tgt_node)
        )

    def __switch_all(self):
        con_node, obj, targets = self.ObjList.currentItem().data(QtCore.Qt.UserRole)

        log.debug("Con: {}".format(con_node))
        log.debug("Obj: {}".format(obj))

        self.SwitchAllSig.emit(
            (self.CheckVisTrans.isChecked(), self.CheckKey.isChecked(),
             con_node, obj, targets)
        )

    def __send_options(self, conType):
        skipT = []
        skipR = []
        skipS = []

        axes = ("x", "y", "z")

        TAll = (TX, TY, TZ) = (
            self.CheckTrX.isChecked(),
            self.CheckTrY.isChecked(),
            self.CheckTrZ.isChecked()
        )
        RAll = (RX, RY, RZ) = (
            self.CheckRoX.isChecked(),
            self.CheckRoY.isChecked(),
            self.CheckRoZ.isChecked()
        )
        SAll = (SX, SY, SZ) = (
            self.CheckScX.isChecked(),
            self.CheckScY.isChecked(),
            self.CheckScZ.isChecked()
        )

        for c, a in zip(TAll, axes):
            if not c:
                skipT.append(a)
        for c, a in zip(RAll, axes):
            if not c:
                skipR.append(a)
        for c, a in zip(SAll, axes):
            if not c:
                skipS.append(a)

        if self.CheckTrAll.isChecked():
            skipT = ['none']
        if self.CheckRoAll.isChecked():
            skipR = ['none']
        if self.CheckScAll.isChecked():
            skipS = ['none']

        mOffset = self.CheckOffset.isChecked()
        weight = self.SpinWeight.value()
        Offset = (
            self.SpinOffsetX.value(),
            self.SpinOffsetY.value(),
            self.SpinOffsetZ.value()
        )

        log.debug("Offset: {}".format(Offset))
        log.debug("Maintain offset: {}".format(mOffset))
        log.debug("Weight: {}".format(weight))
        log.debug("Skip translate: {}".format(skipT))
        log.debug("Skip rotate: {}".format(skipR))
        log.debug("Skip scale: {}".format(skipS))

        self.OptionsSig.emit(conType, Offset, mOffset, weight, skipT, skipR, skipS)

    def __add_con(self):
        self.AddSig.emit()

    def __remove_con(self, arg=None):
        current_row = self.ObjList.currentRow()
        current_item = self.ObjList.item(current_row)
        log.debug("Removing {} from list...".format(current_item.label))
        self.DelSig.emit(current_item.con_node)
        # Callback will iter through UI after node deletion
        log.debug("Removed {}...".format(current_item.label))

    def __purge(self):
        log.debug("Purging")
        self.PurgeSig.emit()
        self._Purge = None
        del self.__StaleData[:]

    def __stale_iter(self, cb_bundle):
        dag_path, clientData = cb_bundle

        if clientData:
            for stale_item in self.__StaleData:
                if stale_item.exists:
                    self.RenameSig.connect(stale_item.update_label_callback)
                    self.ObjList.addItem(stale_item)
                    self.ObjList.sortItems(order=QtCore.Qt.AscendingOrder)
                    self.ObjList.setCurrentItem(stale_item)

        elif clientData is False:
            for list_item in self.iter_list():
                if dag_path in [list_item.con_dag, list_item.object_dag]:
                    current_row = self.ObjList.row(list_item)
                    self.RenameSig.disconnect(list_item.update_label_callback)
                    self.__StaleData.append(self.ObjList.takeItem(current_row))
                    self.ObjList.sortItems(order=QtCore.Qt.AscendingOrder)


class PurgeConfirm(QtWidgets.QMainWindow):

    """Window to protect data from accidental purge."""

    ConfirmSig = Signal()

    def __init__(self, parent=None):
        """:param parent: Window or widget to parent purge window under."""
        super(PurgeConfirm, self).__init__(parent=parent)
        self.__show_ui()
        self.__center(parent)
        self.setWindowModality(QtCore.Qt.WindowModal)
        self.show()

    def __show_ui(self):
        self.setObjectName("PurgeConfirm")
        self.setWindowTitle("Purge")

        self.container = QtWidgets.QWidget(self)
        self.warning = QtWidgets.QLabel("Purge all data?\nWARNING: THIS CANNOT BE UNDONE")

        self.confirm_button = QtWidgets.QPushButton("OK")
        self.confirm_button.clicked.connect(self.__button_click)

        self.VLayout = QtWidgets.QVBoxLayout(self.container)
        self.HLayout = QtWidgets.QHBoxLayout(self.container)

        self.icon_label = QtWidgets.QLabel(self.container)
        self.icon_label.setPixmap(QtGui.QPixmap(":/SP_MessageBoxCritical.png"))

        self.container.setLayout(self.VLayout)
        self.HLayout.addWidget(self.icon_label)
        self.HLayout.addWidget(self.warning)
        self.VLayout.addLayout(self.HLayout)
        self.VLayout.addWidget(self.confirm_button)
        self.setCentralWidget(self.container)

    def __center(self, cman_win):
        cman_geo = cman_win.frameGeometry()
        cman_center = cman_geo.center()
        purge_geo = self.frameGeometry()
        purge_geo.moveCenter(cman_center)
        self.move(purge_geo.topLeft())

    def __button_click(self):
        log.debug("Pressed")
        self.ConfirmSig.emit()
        self.close()


class ConManHelpWindow(QtWidgets.QMainWindow):

    """Help window for ConMan."""

    def __init__(self, parent=None):
        """:param parent: Window or widget to parent help window under."""
        super(ConManHelpWindow, self).__init__(parent=parent)

        self.helpText = (
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
            "p, li { white-space: pre-wrap; }\n"
            "</style></head><body style=\" font-family:\'Sans Serif\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:12pt; font-weight:600;\">ConMan2</span></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A constraint manager for rigging and animation.</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Create</span></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Create common constraints (parent, point, orient, scale) with the given options.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Remove</span></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Delete a constraint from the scene with the trash icon.</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Switch</span></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Switch constraint targets in the second section. Select a constraint, then a target in the dropdown menu.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">OFF</span> turns off all weights and blend attributes.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">ON</span> turns on all weights and blend attributes.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">SWITCH</span> activates a single target and blend attributes and deactivates the rest.</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Maintain Visual Transforms</span>: Update constraint offsets to maintain the object\'s world-space transforms.</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Key</span>: Animate the switch across two frames (current and immediately previous).</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Constraint data is saved in the scene file.</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">Purge...</span>: Remove ALL data from the tool.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">WARNING: THIS IS NOT UNDO-ABLE!</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">(c) Jeffrey &quot;italic&quot; Hoover</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">italic DOT rendezvous AT gmail DOT com</p>\n"
            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Licensed under the Apache 2.0 license.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This script can be used for commercial and non-commercial projects free of charge.</p>\n"
            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><a href=\"https://www.apache.org/licenses/LICENSE-2.0\"><span style=\" text-decoration: underline; color:#0057ae;\">https://www.apache.org/licenses/LICENSE-2.0</span></a></p></body></html>"
        )

        self.settings = QtCore.QSettings("italic", "ConMan2")
        self.__show_ui()
        self.move(self.settings.value("helpwindowposition", QtCore.QPoint(0, 0)))

    def __show_ui(self):
        self.setObjectName("ConManHelpWindow")
        self.setWindowTitle("ConMan Help")
        self.resize(325, 250)
        self.setMinimumSize(325, 250)
        self.setMaximumSize(600, 425)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setFamily("Arial")
        self.setFont(font)

        self.centralwidget = QtWidgets.QWidget(self)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(325, 250))
        self.centralwidget.setMaximumSize(QtCore.QSize(600, 425))
        self.centralwidget.setObjectName("centralwidget")

        self.vlayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.vlayout.setSpacing(2)
        self.vlayout.setContentsMargins(2, 2, 2, 2)
        self.vlayout.setObjectName("VLayout")

        self.textwidget = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.textwidget.setSizePolicy(sizePolicy)
        self.textwidget.setReadOnly(True)
        self.textwidget.setObjectName("TextWidget")
        self.textwidget.setHtml(self.helpText)

        self.vlayout.addWidget(self.textwidget)

        self.setCentralWidget(self.centralwidget)

    def closeEvent(self, *args, **kwargs):
        """Custom closeEvent to write settings to file."""
        self.settings.setValue("helpwindowposition", self.pos())
        super(ConManHelpWindow, self).closeEvent(*args, **kwargs)


if __name__ == "__main__":
    generic_data = {
        "type": "Parent",
        "object": "active object1",
        "target": ["sel obj 1", "sel obj 2"],
        "con_node": "con node name"
    }

    try:
        win = QtWidgets.QApplication([])
    except RuntimeError:
        win = QtCore.QCoreApplication.instance()
    _CMan = ConManWindow()
    _CMan.show()
    _CMan.populate_list(generic_data)

    win.exec_()
