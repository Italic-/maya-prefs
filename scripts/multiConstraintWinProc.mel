//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    Name:		PGP-Multi Constraint v1.3.mel     ////    Date:        	12th Feb. 2012//   //    Author:  		Pranaw Gorkhali Pradhan//           		pranawpradhan@hotmail.com////    Execution: 	Source the script, type "multiConstraintWinProc" in command line and hit the Enter key.////    Description:	This script is useful for constraining multiple objects by other multiple objects. For further information see the Documentation file.////    Note:       	This script calls Maya's constraining option box commands to source the reset script.//			Use this script at your own risk. Author will not be responsible for any damages or losses.//                	Modification to this script is not advised.//                	Comments and feedbacks are most welcome./////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////global proc multiConstraintWinProc(){string $winName = "PGP-Multi Constraint v1.3";string $win = "multiConstraintWin";if(`window -ex $win`){	deleteUI $win;}window-rtf 1-mxb 0-t $winName$win;columnLayout -adj 1;rowColumnLayout -nc 2 -cw 1 200 -cw 2 200;text -al "center" -fn "boldLabelFont" "Driver";text -al "center" -fn "boldLabelFont" "Driven";setParent..;paneLayout -w 400 -h 200 -configuration "vertical2";textScrollList -numberOfRows 8 -allowMultiSelection true -showIndexedItem 4 -dcc "select -r `textScrollList -q -si tslA`" tslA;textScrollList -numberOfRows 8 -allowMultiSelection true -showIndexedItem 4 -dcc "select -r `textScrollList -q -si tslB`" tslB;setParent..;rowColumnLayout -nc 8 -cw 1 60 -cw 2 65 -cw 3 60 -cw 4 65 -cw 5 60 -cw 6 65 -cw 7 60 -cw 8 65 ;button -l "Add" -c "driverAdd";button -l "Remove" -c ("textScrollList -e -ri `textScrollList -q -si tslA` tslA");button -l "Clear" -c ("textScrollList -e -ra tslA");button -l "Deselect" -c ("textScrollList -e -da tslA");button -l "Add" -c "drivenAdd";button -l "Remove" -c ("textScrollList -e -ri `textScrollList -q -si tslB` tslB");button -l "Clear" -c ("textScrollList -e -ra tslB");button -l "Deselect" -c ("textScrollList -e -da tslB");setParent..;separator ;text -al "left" -fn "boldLabelFont" "Multi Constraint Type:";rowColumnLayout -nc 4 -cw 1 50 -cw 2 200 -cw 3 200 -cw 4 50 ;	string $option = `radioCollection rcMC`;	string $rb1, $rb2;	text " ";	$rb1 = `radioButton -label "One To One"`;	$rb2 = `radioButton -label "All To One"`;	text " ";setParent..;radioCollection -edit -select $rb2 $option;separator ;setParent..;string $form = `formLayout`;string $tabs = `tabLayout -innerMarginWidth 5 -innerMarginHeight 10`;formLayout -edit    -attachForm $tabs "top"    0     -attachForm $tabs "left"   0     -attachForm $tabs "bottom" 0     -attachForm $tabs "right"  0     $form;     string $pointTab = `columnLayout -adj 1`;	//	Name of the command for this option box.	//	string $commandName = "pointConstraint";	//	Build the option box actions.	//	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	tabLayout -scr false -tv false;	string $parent = `columnLayout -adjustableColumn 1 clpoint`;	checkBoxGrp		-label (uiRes("m_performPointConstraint.kMaintainOffset")) 		-label1 " "		-annotation (uiRes("m_performPointConstraint.kMaintainOffsetAnnot")) 		-numberOfCheckBoxes 1		-cc ("floatFieldGrp -edit -enable (! #1) offsetField;")		pointConstraintMaintainWidget;		floatFieldGrp -label (uiRes("m_performPointConstraint.kOffset")) 		-numberOfFields 3		offsetField;	separator;	//	  Constraint Axes Selection Boxes	//	// The 'axesAll' checkBoxGrp and the 'axesXYZ' checkBoxGrp are linked	// such that when 'axesAll' is selected, all the 'axesXYZ' boxes are	// unselected. And when any 'axesXYZ' box is selected the 'axesAll'	// box is deselected.	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performPointConstraint.kConstraintAxes")) 		-label1 (uiRes("m_performPointConstraint.kAll")) 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"-value2 false " +					"-value3 false " +					"axesXYZ")		axesAll;			checkBoxGrp -numberOfCheckBoxes 3		-label1 (uiRes("m_performPointConstraint.kX")) 		-label2 (uiRes("m_performPointConstraint.kY")) 		-label3 (uiRes("m_performPointConstraint.kZ")) 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"axesAll;")		axesXYZ;	separator;	floatSliderGrp -label (uiRes("m_performPointConstraint.kWeight")) 		-field true -min 0.0 -max 10.0 		pointConstraintWeight;	setUITemplate -popTemplate;	rowColumnLayout -nc 2 -cw 1 188 -cw 2 188 rclPoint;		button pointApBt;	button -edit		-label (uiRes("m_performPointConstraint.kAddButton")) 		-command "addPointConstraint" pointApBt;	button -l "Reset" pointRstBt;	button -edit 		-command ($setup + " " + $parent + " " + 1) pointRstBt;	setParent..;	setParent..;	setParent..;	setParent..;     string $orientTab = `columnLayout -adj 1`;	string $commandName = "orientConstraint";	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	string $parent = `columnLayout -adjustableColumn 1 clOrient`;		checkBoxGrp		-label (uiRes("m_performOrientConstraint.kMaintainOffset")) 		-label1 " "		-annotation (uiRes("m_performOrientConstraint.kMaintainOffsetAnnot")) 		-numberOfCheckBoxes 1		-cc ("floatFieldGrp -edit -enable (! #1) offsetField;")		orientConstraintMaintainWidget;		floatFieldGrp -label (uiRes("m_performOrientConstraint.kOffset")) 		-numberOfFields 3		offsetField;	separator;	//	  Constraint Axes Selection Boxes	//	// The 'axesAll' checkBoxGrp and the 'axesXYZ' checkBoxGrp are linked	// such that when 'axesAll' is selected, all the 'axesXYZ' boxes are	// unselected. And when any 'axesXYZ' box is selected the 'axesAll'	// box is deselected.	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performOrientConstraint.kConstraintAxes")) 		-label1 (uiRes("m_performOrientConstraint.kAll")) 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"-value2 false " +					"-value3 false " +					"axesXYZ")		axesAll;			checkBoxGrp -numberOfCheckBoxes 3		-label1 (uiRes("m_performOrientConstraint.kX")) 		-label2 (uiRes("m_performOrientConstraint.kY")) 		-label3 (uiRes("m_performOrientConstraint.kZ")) 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"axesAll;")		axesXYZ;	separator;	floatSliderGrp -label (uiRes("m_performOrientConstraint.kWeight"))		-field true -min 0.0 -max 10.0 		orientConstraintWeight;	//	Turn off the wait cursor.	//	//	Deactivate the default UI template.	//	setUITemplate -popTemplate;	//	'Apply' button.	//	setParent..;	rowColumnLayout -nc 2 -cw 1 188 -cw 2 188;	button orientApBt;	button -edit		-label (uiRes("m_performOrientConstraint.kAddButton")) 		-command "addOrientConstraint" orientApBt;	button -l "Reset" reset;	button -edit 		-command ($setup + " " + $parent + " " + 1)		reset;	setParent..;	setParent..;//===============================================================================     string $scaleTab = `columnLayout -adj 1`;	//	Name of the command for this option box.	//	string $commandName = "scaleConstraint";	//	Build the option box actions.	//	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	//	Activate the default UI template.	//	setUITemplate -pushTemplate DefaultTemplate;	//	Turn on the wait cursor.	//	waitCursor -state 1;	tabLayout -scr true -tv false;	string $parent = `columnLayout -adjustableColumn 1 clScale`;		checkBoxGrp		-label (uiRes("m_performScaleConstraint.kMaintainOffset")) 		-label1 " "		-annotation (uiRes("m_performScaleConstraint.kMaintainOffsetAnnot")) 		-numberOfCheckBoxes 1		-cc ("floatFieldGrp -edit -enable (! #1) offsetField;")		scaleConstraintMaintainWidget;		floatFieldGrp -label (uiRes("m_performScaleConstraint.kOffset")) 		-numberOfFields 3		offsetField;	separator;	//	  Constraint Axes Selection Boxes	//	// The 'axesAll' checkBoxGrp and the 'axesXYZ' checkBoxGrp are linked	// such that when 'axesAll' is selected, all the 'axesXYZ' boxes are	// unselected. And when any 'axesXYZ' box is selected the 'axesAll'	// box is deselected.	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performScaleConstraint.kConstraintAxes")) 		-label1 (uiRes("m_performScaleConstraint.kAll")) 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"-value2 false " +					"-value3 false " +					"axesXYZ")		axesAll;			checkBoxGrp -numberOfCheckBoxes 3		-label1 (uiRes("m_performScaleConstraint.kX")) 		-label2 (uiRes("m_performScaleConstraint.kY")) 		-label3 (uiRes("m_performScaleConstraint.kZ")) 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"axesAll;")		axesXYZ;	separator;	floatSliderGrp -label (uiRes("m_performScaleConstraint.kWeight")) 		-field true -min 0.0 -max 10.0 		scaleConstraintWeight;	//	Turn off the wait cursor.	//	waitCursor -state 0;		//	Deactivate the default UI template.	//	setUITemplate -popTemplate;	//	'Apply' button.	//	rowColumnLayout -nc 2 -cw 1 187 -cw 2 187 ;	button scaleApBt;	button -edit		-label (uiRes("m_performScaleConstraint.kAddButton")) 		-command "addScaleConstraint" scaleApBt;	button -l "Reset" scaleRstBt;	button -edit 		-command ($setup + " " + $parent + " " + 1)		scaleRstBt;	setParent..;	setParent..;	setParent..;	setParent..;//multiConstraintWinProc//===============================================================================     string $parentTab = `columnLayout -adj 1`;	//	Name of the command for this option box.	//	string $commandName = "parentConstraint";	//	Build the option box actions.	//	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	//	Turn on the wait cursor.	//	waitCursor -state 1;	tabLayout -scr false -tv false;	string $parent = `columnLayout -adjustableColumn 1 clParent`;		//frameLayout -label "Offset" -labelAlign "center" -collapsable false -collapse false;	//columnLayout;	checkBoxGrp		-label (uiRes("m_performParentConstraint.kMaintainOffset")) 		-label1 " "		-annotation (uiRes("m_performParentConstraint.kMaintainOffsetAnnot")) 		-numberOfCheckBoxes 1		parentConstraintMaintainWidget;	//setParent ..;	//setParent ..;	//	  Constraint Axes Selection Boxes	//	// The 'axesAll' checkBoxGrp and the 'axesXYZ' checkBoxGrp are linked	// such that when 'axesAll' is selected, all the 'axesXYZ' boxes are	// unselected. And when any 'axesXYZ' box is selected the 'axesAll'	// box is deselected.	// axesTranslate	frameLayout -label (uiRes("m_performParentConstraint.kConstraintAxes"))  -labelAlign "center" -collapsable false -collapse false;	columnLayout;	string $allOption = (uiRes("m_performParentConstraint.kAll"));	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performParentConstraint.kTranslate")) 		-label1  $allOption		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"-value2 false " +					"-value3 false " +					"axesTranslateXYZ")		axesTranslateAll;		string $x = (uiRes("m_performParentConstraint.kX"));	string $y = (uiRes("m_performParentConstraint.kY"));	string $z = (uiRes("m_performParentConstraint.kZ"));				checkBoxGrp -numberOfCheckBoxes 3		-label1 $x 		-label2 $y 		-label3 $z 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"axesTranslateAll;")		axesTranslateXYZ;	// axesRotate	checkBoxGrp -numberOfCheckBoxes 1 -label (uiRes("m_performParentConstraint.kRotate")) 		-label1 $allOption 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"-value2 false " +					"-value3 false " +					"axesRotateXYZ")		axesRotateAll;			checkBoxGrp -numberOfCheckBoxes 3		-label1 $x 		-label2 $y 		-label3 $z 		-onCommand ("checkBoxGrp -edit " +					"-value1 false " +					"axesRotateAll;")		axesRotateXYZ;	setParent..;	setParent..;	floatSliderGrp -label (uiRes("m_performParentConstraint.kWeight"))		-field true -min 0.0 -max 10.0 		parentConstraintWeight;	//	Turn off the wait cursor.	//	waitCursor -state 0;		//	Deactivate the default UI template.	//	setUITemplate -popTemplate;	//	'Apply' button.	//	rowColumnLayout -nc 2 -cw 1 187 -cw 2 187 ;	button parentApBt;	button -edit		-label (uiRes("m_performParentConstraint.kAddButton")) 		-command "addParentConstraint" parentApBt;	button -l "Reset" parentRstBt;	button -edit 		-command ($setup + " " + $parent + " " + 1)		parentRstBt;	setParent..;	setParent..;	setParent..;     tabLayout -edit         -tabLabel $pointTab "Point" -tabLabel $orientTab "Orient" -tabLabel $scaleTab "Scale" -tabLabel $parentTab "Parent"         $tabs;	setParent..;			//multiConstraintWinProc	setParent..;	setParent..;	//text -fn "smallBoldLabelFont" "Copyright (C) 2012 Pranaw Gorkhali Pradhan";showWindow $win;}global proc driverAdd(){		string $drvrSelected[] = `ls -sl`;	int $drvrSize = `size($drvrSelected)`;	for($i=0; $i<$drvrSize; $i++){		textScrollList -e -a ($drvrSelected[$i]) tslA;	}};global proc drivenAdd(){		string $drvnSelected[] = `ls -sl`;	int $drvnSize = `size($drvnSelected)`;	for($i=0; $i<$drvnSize; $i++){		textScrollList -e -a ($drvnSelected[$i]) tslB;	}}//===================================   MAIN POINT PROCEDURE START   =======================================//proc addPointConstraint(){	string $optSel = `radioCollection -q -sl rcMC`;	string $commandName = "pointConstraint";	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	int $drvrSize = `textScrollList -q -nsi tslA`;	string $drvrSel[] = `textScrollList -q -si tslA`;	print $drvrSel;	int $drvnSize = `textScrollList -q -nsi tslB`;	string $drvnSel[] = `textScrollList -q -si tslB`;	if ($optSel == "radioButton1") {		if ( $drvnSize != $drvrSize ) {			string $text;			string $result = `confirmDialog -title "Confirmation" -message "Number of \"Driver\" and \"Driven\" objects are not equal.\nContinue Anyway?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;			if ($result == "Yes") {			int $minSize = `min $drvrSize $drvnSize`;				for($i=0; $i<$minSize; $i++) {						select -r $drvrSel[$i];					select -add $drvnSel[$i];					executeForEachObject ($drvnSel, ($callback + " " + "clpoint" + " " + 1));				}				select -cl;				print "Constraining completed Successfully....\n";			}			else {				print "No constraining was done. \n";			}		}		else {			int $minSize = `min $drvrSize $drvnSize`;			for($i=0; $i<$minSize; $i++) {					select -r $drvrSel[$i];				select -add $drvnSel[$i];				executeForEachObject ($drvnSel, ($callback + " " + "clpoint" + " " + 1));			}			select -cl;			print "Constraining completed Successfully....\n";		}	}	else{		for($i=0; $i<$drvnSize; $i++) {			select -r $drvrSel;			select -add $drvnSel[$i];			executeForEachObject ($drvnSel, ($callback + " " + "clpoint" + " " + 1));		}		select -cl;		print "Constraining completed Successfully....\n";	}}//=====================================  END OF POINT CONSTRAINT    ==========================================////======================================== ORIENT CONSTRAINT START ===========================================//proc addOrientConstraint(){	string $optSel = `radioCollection -q -sl rcMC`;	string $commandName = "orientConstraint";	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	int $drvrSize = `textScrollList -q -nsi tslA`;	string $drvrSel[] = `textScrollList -q -si tslA`;	print $drvrSel;	int $drvnSize = `textScrollList -q -nsi tslB`;	string $drvnSel[] = `textScrollList -q -si tslB`;	if ($optSel == "radioButton1") {		if ( $drvnSize != $drvrSize ) {			string $text;			string $result = `confirmDialog -title "Confirmation" -message "Number of \"Driver\" and \"Driven\" objects are not equal.\nContinue Anyway?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;			if ($result == "Yes") {			int $minSize = `min $drvrSize $drvnSize`;				for($i=0; $i<$minSize; $i++) {						select -r $drvrSel[$i];					select -add $drvnSel[$i];					executeForEachObject ($drvnSel, ($callback + " " + "clOrient" + " " + 1));				}				select -cl;				print "Constraining completed Successfully....\n";			}			else {				print "No constraining was done. \n";			}		}		else {			int $minSize = `min $drvrSize $drvnSize`;			for($i=0; $i<$minSize; $i++) {					select -r $drvrSel[$i];				select -add $drvnSel[$i];				executeForEachObject ($drvnSel, ($callback + " " + "clOrient" + " " + 1));			}			select -cl;			print "Constraining completed Successfully....\n";		}	}	else{		for($i=0; $i<$drvnSize; $i++) {			select -r $drvrSel;			select -add $drvnSel[$i];			executeForEachObject ($drvnSel, ($callback + " " + "clOrient" + " " + 1));		}		select -cl;		print "Constraining completed Successfully....\n";	}}//=====================================  END OF ORIENT CONSTRAINT   ==========================================////============================================= START OF SCALE CONSTRAINT ================================//proc addScaleConstraint(){	string $optSel = `radioCollection -q -sl rcMC`;	string $commandName = "scaleConstraint";	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	int $drvrSize = `textScrollList -q -nsi tslA`;	string $drvrSel[] = `textScrollList -q -si tslA`;	print $drvrSel;	int $drvnSize = `textScrollList -q -nsi tslB`;	string $drvnSel[] = `textScrollList -q -si tslB`;	if ($optSel == "radioButton1") {		if ( $drvnSize != $drvrSize ) {			string $text;			string $result = `confirmDialog -title "Confirmation" -message "Number of \"Driver\" and \"Driven\" objects are not equal.\nContinue Anyway?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;			if ($result == "Yes") {			int $minSize = `min $drvrSize $drvnSize`;				for($i=0; $i<$minSize; $i++) {						select -r $drvrSel[$i];					select -add $drvnSel[$i];					executeForEachObject ($drvnSel, ($callback + " " + "clScale" + " " + 1));				}				select -cl;				print "Constraining completed Successfully....\n";			}			else {				print "No constraining was done. \n";			}		}		else {			int $minSize = `min $drvrSize $drvnSize`;			for($i=0; $i<$minSize; $i++) {					select -r $drvrSel[$i];				select -add $drvnSel[$i];				executeForEachObject ($drvnSel, ($callback + " " + "clScale" + " " + 1));			}			select -cl;			print "Constraining completed Successfully....\n";		}	}	else{		for($i=0; $i<$drvnSize; $i++) {			select -r $drvrSel;			select -add $drvnSel[$i];			executeForEachObject ($drvnSel, ($callback + " " + "clScale" + " " + 1));		}		select -cl;		print "Constraining completed Successfully....\n";	}}//===================================== END OF SCALE CONSTRAINT ===========================================////=====================================  PARENT CONSTRAINT START   ===========================================//proc addParentConstraint(){	string $optSel = `radioCollection -q -sl rcMC`;	string $commandName = "parentConstraint";	string $callback = ($commandName + "Callback");	string $setup = ($commandName + "Setup");	int $drvrSize = `textScrollList -q -nsi tslA`;	string $drvrSel[] = `textScrollList -q -si tslA`;	print $drvrSel;	int $drvnSize = `textScrollList -q -nsi tslB`;	string $drvnSel[] = `textScrollList -q -si tslB`;	if ($optSel == "radioButton1") {		if ( $drvnSize != $drvrSize ) {			string $text;			string $result = `confirmDialog -title "Confirmation" -message "Number of \"Driver\" and \"Driven\" objects are not equal.\nContinue Anyway?" -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;			if ($result == "Yes") {			int $minSize = `min $drvrSize $drvnSize`;				for($i=0; $i<$minSize; $i++) {						select -r $drvrSel[$i];					select -add $drvnSel[$i];					executeForEachObject ($drvnSel, ($callback + " " + "clParent" + " " + 1));				}				select -cl;				print "Constraining completed Successfully....\n";			}			else {				print "No constraining was done. \n";			}		}		else {			int $minSize = `min $drvrSize $drvnSize`;			for($i=0; $i<$minSize; $i++) {					select -r $drvrSel[$i];				select -add $drvnSel[$i];				executeForEachObject ($drvnSel, ($callback + " " + "clParent" + " " + 1));			}			select -cl;			print "Constraining completed Successfully....\n";		}	}	else{		for($i=0; $i<$drvnSize; $i++) {			select -r $drvrSel;			select -add $drvnSel[$i];			executeForEachObject ($drvnSel, ($callback + " " + "clParent" + " " + 1));		}		select -cl;		print "Constraining completed Successfully....\n";	}};OrientConstraintOptions;PointConstraintOptions;ScaleConstraintOptions;ParentConstraintOptions;if (`window -exists OptionBoxWindow`) deleteUI -window OptionBoxWindow;saveOptionBoxSize();